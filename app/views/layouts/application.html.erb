<!DOCTYPE html>
<html>
<head>
  <title>Arenda</title>
  <%= stylesheet_link_tag    "application", media: "all", "data-turbolinks-track" => true %>
  <%= javascript_include_tag "application", "data-turbolinks-track" => true %>
  <%= csrf_meta_tags %>
</head>
<body class= '<%= controller.controller_name %>'>


<div id="mobilebody">  

  <div class="about_company">
    
    <nav id="menu">
      <ul>
        <li>
          <a href="#">НОВОСТРОЙКИ</a>
        </li>
        <li>
          <a href="#">АРЕНДА</a>   
        </li>
        <li>
          <a href="#">ОТДЕЛКА</a>
        </li>
        <li>
        <a href="#" class="yellow">О КОМПАНИИ</a>
        </li>
      </ul>
    </nav>
  </div>
  <div class="line">
    
  </div>
<!--SLIDER-->

      <div class="container">
          <div id="slidy-container">
            <figure id="slidy">
              <img src="http://www.azbuka.ru/upload/iblock/435/4351767ebe36865d252bd8989034dff1.jpg" alt="eyes" >
              <img src="http://www.azbuka.ru/upload/iblock/cbf/cbfaccd42b9b809371055cf9d69377c8.jpg" alt="lou" >
              <img src="http://www.azbuka.ru/upload/iblock/7a5/7a577826aa20ea9a7e5974c9ae90f2cb.jpg" alt="lucie-2" >
              <img src="http://www.azbuka.ru/upload/iblock/435/4351767ebe36865d252bd8989034dff1.jpg" alt="lucie" >
            </figure>
          </div>
      </div>
    <div class='button'>
      <nav class="cbp-spmenu cbp-spmenu-vertical cbp-spmenu-left" id="cbp-spmenu-s1">
        <h3>КАТАЛОГ</h3>
        <a href="#">ОТДЕЛКА КВАРТИР</a>
        <a href="#">1 КОМНАТНАЯ</a>
        <a href="#">ЗАГАРОДНАЯ НЕДВИЖИМОСТЬ</a>
        <a href="#">ЭЛИТНАЯ НЕДВИЖИМОСТЬ</a>
        <a href="#">КОМЕРЧЕСКАЯ НЕДВИЖИМОСТЬ</a>
        <a href="#">ДАЧИ</a>
      </nav>
  
      <div class="container1">
          <div class="main">
            <section>
          <!-- Class "cbp-spmenu-open" gets applied to menu -->
              <button id="showLeft">ПОИСК КВАРТИР</button>
          </section>
          </div>
        </div>
    
  
    <!-- Classie - class helper functions by @desandro https://github.com/desandro/classie -->
    <script>
      var menuLeft = document.getElementById( 'cbp-spmenu-s1' ),
        showLeft = document.getElementById( 'showLeft' ),
        showLeftPush = document.getElementById( 'showLeftPush' );

      showLeft.onclick = function() {
        classie.toggle( this, 'active' );
        classie.toggle( menuLeft, 'cbp-spmenu-open' );
        disableOther( 'showLeft' );
      };
      
      showLeftPush.onclick = function() {
        classie.toggle( this, 'active' );
        classie.toggle( body, 'cbp-spmenu-push-toright' );
        classie.toggle( menuLeft, 'cbp-spmenu-open' );
        disableOther( 'showLeftPush' );
      };
      

      function disableOther( button ) {
        if( button !== 'showLeft' ) {
          classie.toggle( showLeft, 'disabled' );
        }
        if( button !== 'showLeftPush' ) {
          classie.toggle( showLeftPush, 'disabled' );
        }
      }
    </script>
</div>
<!-- Сделать 4 бокса -->
<!-- Поиск кваритр  -->
<div class="hot">
  
</div>

</div> 
  </div>
<!-- Скрипт слайдера -->
<script type="text/javascript">
  /* user defined variables */  
var timeOnSlide = 3,    
    // the time each image will remain static on the screen, measured in seconds
timeBetweenSlides = 1,  
    // the time taken to transition between images, measured in seconds

// test if the browser supports animation, and if it needs a vendor prefix to do so
    animationstring = 'animation',
    animation = false,
    keyframeprefix = '',
    domPrefixes = 'Webkit Moz O Khtml'.split(' '), 
    // array of possible vendor prefixes
    pfx  = '',
    slidy = document.getElementById("slidy"); 
if (slidy.style.animationName !== undefined) { animation = true; } 
// browser supports keyframe animation w/o prefixes

if( animation === false ) {
  for( var i = 0; i < domPrefixes.length; i++ ) {
    if( slidy.style[ domPrefixes[i] + 'AnimationName' ] !== undefined ) {
      pfx = domPrefixes[ i ];
      animationstring = pfx + 'Animation';
      keyframeprefix = '-' + pfx.toLowerCase() + '-';
      animation = true;
      break;
    }
  }
}

if( animation === false ) {
  // animate in JavaScript fallback
} else {
  var images = slidy.getElementsByTagName("img"),
      firstImg = images[0], 
      // get the first image inside the "slidy" element.
      imgWrap = firstImg.cloneNode(false);  // copy it.
  slidy.appendChild(imgWrap); // add the clone to the end of the images
  var imgCount = images.length, // count the number of images in the slide, including the new cloned element
      totalTime = (timeOnSlide + timeBetweenSlides) * (imgCount - 1), // calculate the total length of the animation by multiplying the number of _actual_ images by the amount of time for both static display of each image and motion between them
      slideRatio = (timeOnSlide / totalTime)*100, // determine the percentage of time an induvidual image is held static during the animation
      moveRatio = (timeBetweenSlides / totalTime)*100, // determine the percentage of time for an individual movement
      basePercentage = 100/imgCount, // work out how wide each image should be in the slidy, as a percentage.
      position = 0, // set the initial position of the slidy element
      css = document.createElement("style"); // start marking a new style sheet
  css.type = "text/css";
  css.innerHTML += "#slidy { text-align: left; margin: 0; font-size: 0; position: relative; width: " + (imgCount * 100) + "%;  }\n"; // set the width for the slidy container
  css.innerHTML += "#slidy img { float: left; width: " + basePercentage + "%; }\n";
  css.innerHTML += "@"+keyframeprefix+"keyframes slidy {\n"; 
  for (i=0;i<(imgCount-1); i++) { // 
    position+= slideRatio; // make the keyframe the position of the image
    css.innerHTML += position+"% { left: -"+(i * 100)+"%; }\n";
    position += moveRatio; // make the postion for the _next_ slide
    css.innerHTML += position+"% { left: -"+((i+1) * 100)+"%; }\n";
}
  css.innerHTML += "}\n";
  css.innerHTML += "#slidy { left: 0%; "+keyframeprefix+"transform: translate3d(0,0,0); "+keyframeprefix+"animation: "+totalTime+"s slidy infinite; }\n"; // call on the completed keyframe animation sequence
document.body.appendChild(css); // add the new stylesheet to the end of the document
}

</script>
<script type="text/javascript">
  /*!
 * classie - class helper functions
 * from bonzo https://github.com/ded/bonzo
 * 
 * classie.has( elem, 'my-class' ) -> true/false
 * classie.add( elem, 'my-new-class' )
 * classie.remove( elem, 'my-unwanted-class' )
 * classie.toggle( elem, 'my-class' )
 */

/*jshint browser: true, strict: true, undef: true */

( function( window ) {

'use strict';

// class helper functions from bonzo https://github.com/ded/bonzo

function classReg( className ) {
  return new RegExp("(^|\\s+)" + className + "(\\s+|$)");
}

// classList support for class management
// altho to be fair, the api sucks because it won't accept multiple classes at once
var hasClass, addClass, removeClass;

if ( 'classList' in document.documentElement ) {
  hasClass = function( elem, c ) {
    return elem.classList.contains( c );
  };
  addClass = function( elem, c ) {
    elem.classList.add( c );
  };
  removeClass = function( elem, c ) {
    elem.classList.remove( c );
  };
}
else {
  hasClass = function( elem, c ) {
    return classReg( c ).test( elem.className );
  };
  addClass = function( elem, c ) {
    if ( !hasClass( elem, c ) ) {
      elem.className = elem.className + ' ' + c;
    }
  };
  removeClass = function( elem, c ) {
    elem.className = elem.className.replace( classReg( c ), ' ' );
  };
}

function toggleClass( elem, c ) {
  var fn = hasClass( elem, c ) ? removeClass : addClass;
  fn( elem, c );
}

window.classie = {
  // full names
  hasClass: hasClass,
  addClass: addClass,
  removeClass: removeClass,
  toggleClass: toggleClass,
  // short names
  has: hasClass,
  add: addClass,
  remove: removeClass,
  toggle: toggleClass
};

})( window );
</script>

</body>
</html> 